#!/usr/bin/env node

process.title = 'Lactate';

var optimist = require('optimist')

optimist.usage('Usage: $0 [options]');

var argv = optimist
  .options('from', {
    describe:'Public path',
    default:'',
    alias:'f'
  })
  .options('cache', {
    describe:'Store assets in-memory',
    default:true,
    alias:'c'
  })
  .options('watch_files', {
    describe:'Watch files for cache update',
    default:true,
    alias:['watch-files', 'w']
  })
  .options('subdirs', {
    describe:'Serve subdirectories',
    default:true,
    alias:'s'
  })
  .options('max_age', {
    describe:'Client-side caching max-age',
    default:172800,
    alias:['max-age', 'M']
  })
  .options('gzip', {
    describe:'Gzip text assets',
    default:true,
    alias:'g'
  })
  .options('minify', {
    describe:'Minify text assets',
    default:false,
    alias:'m'
  })
  .options('bundle', {
    describe:'Bundle text assets',
    default:false,
    alias:'b'
  })
  .options('rebundle', {
    describe:'Rebundle assets if modified',
    default:true,
    alias:'r'
  })
  .options('headers', {
    describe:'Custom response headers',
    default:'',
    alias:'H'
  })
  .options('debug', {
    describe:'Log HTTP info',
    default:true,
    alias:'d'
  })
  .options('quiet', {
    describe:'Prevent all log output',
    default:false,
    alias:'q'
  })
  .argv;

if (argv.help) return optimist.showHelp()

argv.headers = require('querystring').parse(argv.headers);

var log = (function() {
  if (!argv.quiet) 
    return console.log;
  argv.debug = false;
  return new(Function);
})();

var Lactate = require('lactate');
var dir = Lactate.dir(process.cwd(), argv);
var handler = dir.toMiddleware();

var cluster = require('cluster');
var cpus = require('os').cpus().length;
var http = require('http');
var port = argv.port || 8080;

if (!cluster.isMaster) {
  return http.createServer(handler).listen(port);
};

log('Using options\n', JSON.stringify(dir.opts, null, 2));

for (var i=0;i<cpus;i++) {
  cluster.fork();
};

cluster.on('listening', function(worker, address) {
  log('Worker', worker.id, 'listening on port', address.port);
});


