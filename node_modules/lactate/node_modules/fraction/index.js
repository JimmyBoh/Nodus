
/**
 * Fractional Buffer stream
 */

var util = require('util');
var Stream = require('stream').Stream;

module.exports.FractionStream = FractionStream;
module.exports.createStream = function(a, b) {
  return new FractionStream(a, b);
};

function FractionStream(data, chunkLen) {
  Stream.call(this);
  this.readable = true;
  this.data = data;
  this.chunkLen = chunkLen || 1024 * 64;
};

util.inherits(FractionStream, Stream);

FractionStream.prototype.pipe = function(dest) {
  var data = this.data;
  var len = data.length;
  var chunkLen = this.chunkLen;
  var offset = 0;

  ;(function sendChunk() {
    if (offset >= len) 
      return dest.end();

    var dist = offset + chunkLen;
    if (dist > len) dist = len;

    var slice = data.slice(offset, dist);
    offset = dist;

    if (dest.write(slice)) {
      process.nextTick(sendChunk);
    }else {
      dest.once('drain', sendChunk);
    };
  })();

  return dest;
};

//Buffer.prototype.toStream = function(chunkLen) {
// return new FractionStream(this, chunkLen);
//};

